* Description
A wireless access point, printing server, syncthing server, and home assistant running on a
raspberry pi, configured with ansible.

* Prerequisites
Your raspberry pi needs to have 
  - the guessable network name enabled
  - SSHD enabled
  
*Please see the ~raspi-config~ command* for this.
* Usage
  1. Copy public ssh key to host
  2. Modify ~config.yaml~ [[file:config.yaml][file]]
  3. Run playbooks i.e. see below
     
This is how I currently use this stuff.
#+BEGIN_SRC shell :session *Shell* :dir ~/rpi-ap-ha
# for AP
ansible-playbook -i raspberrypi.local, --user=pi install-ap.yaml 
# for CUPS
ansible-playbook -i raspberrypi.local, --user=pi install-cups.yaml 
#+END_SRC

** Useful documentation
Ansible doc examples
#+BEGIN_SRC shell
# http://docs.ansible.com/ansible/latest/systemd_module.html
ansible-doc systemd
# http://docs.ansible.com/ansible/latest/template_module.html
ansible-doc template
#+END_SRC

Best Raspberry AP doc:
  - https://www.raspberrypi.org/documentation/configuration/wireless/access-point.md
  - https://elinux.org/RPI-Wireless-Hotspot


* Goals
** Local Printing server
   - wifi-accessible
   - useful for the less technical, with a smartphone
   - secure
* Implementation
The following is the debugging stuff I went through to come to my solution.
** pi as local Printing server

*** set up pi as wifi hotspot

    - a lÃ¡: 
      - https://elinux.org/RPI-Wireless-Hotspot
      - https://www.raspberrypi.org/documentation/configuration/wireless/access-point.md
    - *check out table for good card*: https://elinux.org/RPi_USB_Wi-Fi_Adapters
    - *Worked for me*:
      - CSL 300mbps 2 antennae, ID 148f:5572 Ralink Technology, Corp. RT5572 Wireless Adapter [[https://www.amazon.de/gp/product/B00LLIOT34/ref=ox_sc_act_title_2?smid=AEB9F56C3A3O6&psc=1][buy]] 
      - EW-7811Un USB ID 7392:7811, [[https://www.amazon.de/dp/B003MTTJOY/ref=twister_B00I8G1LWY?_encoding=UTF8&th=1][buy]] 


#+HEADER: :var ap=192.168.0.10
#+BEGIN_SRC shell :session *Shell* :results silent
  ssh-copy-id pi@${ap}
  ssh pi@${ap}
#+END_SRC

*** backup important stuff
[[file:backup.yaml]]

#+BEGIN_SRC shell :session *Shell* :dir ~/rpi-ap-ha
ansible-playbook -i inventory backup.yaml --ask-become-pass
#+END_SRC
*** Install important stuff with ansible 

#+NAME: rpi-wifi-yaml
[[file:install-ap.yaml]]

#+BEGIN_SRC shell :session *Shell* :dir ~/rpi-ap-ha
ansible-playbook -i inventory install-ap.yaml --ask-become-pass
#+END_SRC
** make templates from configured files
#+BEGIN_SRC shell :dir ~/rpi-ap-ha/ :results raw
sed -ri 's/192\.168\.42/{{ ipv4address }}/g;s/eth0/{{ br_interface }}/g;s/wlan0/{{ ap_interface }}/g' templates/*
#+END_SRC



* TODO Plan

  - [ ] Pin to a version of ansible
  - [ ] translate airprint & iptables scripting to yaml

#+BEGIN_SRC shell :session *Shell* :results silent :var interface="wlan0"
sudo mkdir /opt/airprint
cd /opt/airprint
sudo git clone https://github.com/tjfontaine/airprint-generate.git
sudo ln -sf airprint-generate/airprint-generate.py .
sudo python airprint-generate.py -d /etc/avahi/services
sudo adduser pi lpadmin
sudo systemctl restart cups avahi-daemon
sudo systemctl status cups avahi-daemon
sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
sudo iptables -A FORWARD -i eth0 -o $interface -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A FORWARD -i $interface -o eth0 -j ACCEPT
sudo sh -c "iptables-save > /etc/iptables.ipv4.nat"
#+END_SRC

And it just works. Awesome.
*If it doesn't and you have an HP-printer, please run ~hp-doctor~.*

  - [ ] test/have testing environment available
